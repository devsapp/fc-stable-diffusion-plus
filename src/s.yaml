edition: 1.0.0 #  命令行YAML规范版本，遵循语义化版本（Semantic Versioning）规范
name: fc-stable-diffusion-plus
access: default
vars:
  region: '{{ region }}'
  service:
    name: '{{ serviceName }}'
    description: 'stable-diffusion部署到函数计算，支持模型及插件自定义'
    nasConfig: auto
    vpcConfig: auto
    internetAccess: true
services:
  fc-nas-init:
    component: fc
    props:
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: "nas-init"
        description: 'Prepare nas'
        codeUri: './code/source-code/init'
        runtime: python3.9
        timeout: 1200
        memorySize: 3072
        cpu: 2.0
        diskSize: 512
        instanceConcurrency: 1
        handler: index.handler
  fc-model-download:
    component: fc
    actions:
      pre-deploy: 
        - run: npm i 
          path: ./code/source-code/download-model2nas
    props:
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: "model-download"
        description: 'download model to nas'
        codeUri: './code/source-code/download-model2nas'
        runtime: nodejs16
        timeout: 600
        memorySize: 3072
        cpu: 2.0
        diskSize: 512
        instanceConcurrency: 1
        handler: index.handler
        environmentVariables:
          region: ${vars.region}
  fc-nas-filemgr: # 业务名称/模块名称
    component: fc 
    actions: 
      post-deploy: # 在deploy之前运行
        - component: fc nas upload -r ./code/sd-resource /mnt/auto/sd
          path: ./  
        - component: fc invoke --service-name ${fc-nas-init.output.service.name}
            --function-name nas-init
        - component: fc ondemand put --qualifier LATEST --max 1
    props: # 组件的属性值
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: "admin"
        description: 'kodbox  Function'
        codeUri: './code/source-code/kodbox'
        runtime: custom
        timeout: 7200
        memorySize: 3072
        cpu: 2.0
        diskSize: 512
        instanceConcurrency: 16
        caPort: 80
        customRuntimeConfig:
          command:
            - bash
          args:
            - '-c'
            - '/code/start.sh'
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - PUT
              - DELETE
              - HEAD
              - OPTIONS
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: /*

  keep-warm: # 辅助函数, 2 min 定时预热
    component: fc # 组件名称
    actions:
      post-deploy:
        - component: fc invoke --service-name ${fc-model-download.output.service.name}
            --function-name model-download
    props: # 组件的属性值
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: keep-warm
        description: 'Serverless Devs Web Framework Helper Function'
        codeUri: './code/source-code/keep-warm'
        handler: index.handler
        runtime: python3
        timeout: 120
        memorySize: 128
        cpu: 0.1
        diskSize: 512
        instanceConcurrency: 1
        environmentVariables:
          KODBOX_URL: ${fc-nas-filemgr.output.url.custom_domain[0].domain}
      triggers:
        - name: timerTrigger
          type: timer
          # qualifier: LATEST    
          config:
            payload: '{}'
            cronExpression: '@every 2m'
            enable: false
  stable-diffusion-sd-server:
    component: fc
    props:
      region: ${vars.region}
      service: ${vars.service}
      function:
        handler: index.handler
        timeout: 600
        diskSize: 10240
        caPort: 7860
        instanceType: fc.gpu.tesla.1
        runtime: custom-container
        cpu: 8
        customContainerConfig:
          args: ''
          accelerationType: Default
          image: '{{ imageUrl }}'
          accelerationInfo:
            status: Preparing
          command: ''
          webServerMode: true
        instanceConcurrency: 100
        memorySize: 32768
        environmentVariables: {}
        gpuMemorySize: 16384
        name: '{{ functionName }}'
        asyncConfiguration: {}
      triggers:
        - name: defaultTrigger
          description: ''
          type: http
          qualifier: LATEST
          config:
            methods:
              - GET
              - POST
              - PUT
              - DELETE
            authType: anonymous
            disableURLInternet: false
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: /*